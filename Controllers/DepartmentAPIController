using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using WebAPI_Project.Models;

namespace WebAPI_Project.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DepartmentAPIController : ControllerBase
    {
        private readonly ApplicationDBContext _dbContext;

        public DepartmentAPIController(ApplicationDBContext dBContext)
        {
            this._dbContext = dBContext;
        }

        [HttpGet]
        public async Task<ActionResult<List<Department>>> GetDepartmen()
        {
            var data = await _dbContext.Departments.ToListAsync();
            return Ok(data);
        }

        [HttpGet("{Id}")]
        public async Task<ActionResult<List<Department>>> GetDepartmentById(int Id)
        {
            var departments = await _dbContext.Departments.FindAsync(Id);
            if (departments == null)
            {
                return NotFound();
            }
            return departments;
        }

        [HttpPost]
        public async Task<ActionResult<Department>> AddDepartment(Department department)
        {
            await _dbContext.Departments.AddAsync(department);
            await _dbContext.SaveChangesAsync();
            return Ok(department);

        }


        [HttpPut("{Id}")]
        public async Task<ActionResult<Department>> UpdateDepartment(int Id, Department department)
        {
            if (Id != department.Id)
            {
                return BadRequest();
            }
            _dbContext.Entry(department).State = EntityState.Modified;
            await _dbContext.SaveChangesAsync();
            return Ok(department);

        }

        [HttpDelete("{Id}")]
        public async Task<ActionResult<Department>> DeleteDepartment(int Id)
        {

            var department = await _dbContext.Departments.FindAsync(Id);
            if (department == null)
            {
                return NotFound();
            }
            _dbContext.Departments.Remove(department);
            await _dbContext.SaveChangesAsync();
            return NoContent();

        }

    }
}
